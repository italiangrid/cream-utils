#!/usr/bin/python
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#     http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

import sys
import re
import socket
import time




def main():
    pRegex = re.compile('^\s*([^=\s]+)\s*=([^$]+)$')

    config = {}
    
    conffile = None
    foundErr = False
    try:
        if len(sys.argv) <> 2:
            raise Exception("Usage: glite-ce-glue2-computingservice-static <config-file>")
            
        conffile = open(sys.argv[1])
        for line in conffile:
            parsed = pRegex.match(line)
            if parsed:
                config[parsed.group(1)] = parsed.group(2).strip(' \n\t"')
            else:
                tmps = line.strip()
                if len(tmps) > 0 and not tmps.startswith('#'):
                    raise Exception("Error parsing configuration file " + sys.argv[1])
        
        for mItem in ['SiteId',
                      'ComputingServiceId',
                      'Shares',
                      'ExecutionEnvironments']:
            if not mItem in config:
                raise Exception("Missing attribute %s" % mItem)
            
        if not "EMIES" in config:
            config["EMIES"] = "no"
        if not "NumberOfEndPointType" in config:
            config["NumberOfEndPointType"] = 2
    
    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        foundErr = True

    if conffile:
        conffile.close()
    if foundErr:
        sys.exit(1)

    infoprovVersion = "1.1"
    hostname = socket.getfqdn()
    now = time.strftime("%Y%m%dT%H:%M:%SZ", time.gmtime())
    
    try:
    
        endpointCount = int(config["NumberOfEndPointType"])

        shareList = config["Shares"].strip("()").split(',')
        shareCount = len(shareList)
        
        resourceList = config["ExecutionEnvironments"].strip("()").split(',')
        resourceCount = len(resourceList)
        
    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        sys.exit(1)
    
    
    
    out = sys.stdout
    
    out.write("dn: GLUE2ServiceID=%s,GLUE2GroupID=resource,o=glue\n" % config['ComputingServiceId'])
    out.write("objectClass: GLUE2Entity\n")
    out.write("objectClass: GLUE2Service\n")
    out.write("objectClass: GLUE2ComputingService\n")
    out.write("GLUE2ServiceID: %s\n" % config['ComputingServiceId'])
    out.write("GLUE2EntityCreationTime: %s\n" % now)
    out.write("GLUE2EntityName: Computing Service %s\n" % config['ComputingServiceId'])
    out.write("GLUE2EntityOtherInfo: InfoProviderName=glite-ce-glue2-computingservice-static\n")
    out.write("GLUE2EntityOtherInfo: InfoProviderVersion=%s\n" % infoprovVersion)
    out.write("GLUE2EntityOtherInfo: InfoProviderHost=%s\n" % hostname)
    out.write("GLUE2ServiceCapability: executionmanagement.jobexecution\n")
    if config['EMIES'] == 'yes':
        out.write("GLUE2ServiceCapability: executionmanagement.jobdescription\n")
        out.write("GLUE2ServiceCapability: executionmanagement.jobmanagement\n")
        out.write("GLUE2ServiceCapability: information.discovery\n")
        out.write("GLUE2ServiceCapability: information.discovery.resource\n")
        out.write("GLUE2ServiceCapability: information.monitoring\n")
        out.write("GLUE2ServiceCapability: security.delegation\n")
    #
    # Keep this kind of service type even for CREAM-ES
    #
    out.write("GLUE2ServiceType: org.glite.ce.CREAM\n")
    out.write("GLUE2ServiceQualityLevel: production\n")
    out.write("GLUE2ServiceComplexity: endpointType=%d, share=%d, resource=%d\n"
              % (endpointCount, shareCount, resourceCount))
    out.write("GLUE2ServiceAdminDomainForeignKey: %s\n" % config['SiteId'])
    out.write("\n")





if __name__ == "__main__":
    main()

