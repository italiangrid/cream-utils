#!/usr/bin/perl -w
#
# glite-ce-glue2-executionenvironment-static: an information provider for the
# static part of the ExecutionEnvironment object, in v 2.0 of the GLUE schema
# It can be installed as a gip provider or, even better, it can be called
# just once to produce a ldif part to be installed in the ldif
# gip directory
#
# Author: Massimo Sgaravatto
#
# Ref: http://www.ogf.org/documents/GFD.147.pdf
#      http://glue20.web.cern.ch/glue20/
# Copyright (c) Members of the EGEE Collaboration. 2010.
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.
#
#     Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
use strict;
use FileHandle;
use POSIX qw(strftime);

#
# Version number for this code
my $version = "1.0";


my $host = `hostname -f`;
chomp($host);

my $confile;


my %config = (
        ComputingServiceId => '',
	      );

# Read in the configuration file (first argument)


if ($ARGV[0]){
    $confile = $ARGV[0];
    my $fh = new FileHandle $confile
        or die "Error: Can't open configuration file: $ARGV[0]\n";
    foreach (<$fh>){
        if ((! m/^\#/) & (m/=/)){
# For lines containing an = and not starting with #
            m/^(.*?)=\s*(.*)\s*$/;
# Split on the first =, no leading or trailing whitespace in the value
            my $key=$1;
            my $value=$2;
            $key=~s/\s+//g;
            $config{$key}=$value;
	}
    }
}else{
    print STDERR "Usage: glite-ce-glue2-executionenvironment-static <config-file> \n";
    exit 1;
}

# Get service id from conf file
my $ServiceID = $config{ComputingServiceId};

# No white space. No "
$ServiceID =~ s/\s+//g;
$ServiceID =~ s/\"//g;

# Times are mandated to be UTC only
my $TimeNow = strftime("%Y-%m-%dT%H:%M:%SZ", gmtime());

my $bind_dn = "GLUE2ServiceID=$ServiceID,GLUE2GroupID=resource,o=glue";

# Read EEs from conf file
my $ExecutionEnvironments = $config{ExecutionEnvironments};

#No leading and traling spaces. No "
$ExecutionEnvironments =~ s/^\s+//;
$ExecutionEnvironments =~ s/\s+$//;
$ExecutionEnvironments =~ s/\"//g;

# Get list of EEs. Separator is ,
my @list = split /,/, $ExecutionEnvironments;

my $ResourceID;

foreach $ResourceID (@list)
{
 #strip (, ), leading and trailing spaces
      $ResourceID =~ s/\(//g;
      $ResourceID =~ s/\)//g;
      $ResourceID =~ s/^\s+//;
      $ResourceID =~ s/\s+$//; 


      # Now start outputting LDIF lines for the Endpoint object.
      # Note that once we get here we are committed to printing a
      # complete, valid object. Start with the DN ...

      print "dn: GLUE2ResourceID=$ResourceID,$bind_dn\n";

      # Print the boilerplate objectclass declarations and unique ID
      print "objectClass: GLUE2Entity\n";
      print "objectClass: GLUE2Resource\n";
      print "objectClass: GLUE2ExecutionEnvironment\n";

      print "GLUE2EntityCreationTime: $TimeNow\n";

      # No validity, since this is static info

      # Print ResourceID   
      print "GLUE2ResourceID: $ResourceID\n";

      # The name is just an indicative human-readable string.
      # Let's use the ResourceID for the name
      print "GLUE2EntityName: $ResourceID\n";

      # Embed some metadata to help with debugging
      print "GLUE2EntityOtherInfo: InfoProviderName=glite-ce-glue2-executionenvironment-static\n";
      print "GLUE2EntityOtherInfo: InfoProviderVersion=$version\n";
      print "GLUE2EntityOtherInfo: InfoProviderHost=$host\n";

      # SMPsize published in OtherInfo

      my $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_SmpSize";
      my $Smpsize = $config{$valuetoread};

      # No leading and traling spaces. No "
      $Smpsize =~ s/^\s+//;
      $Smpsize =~ s/\s+$//;
      $Smpsize =~ s/\"//g;

      print "GLUE2EntityOtherInfo: SmpSize=$Smpsize\n";

      # Number of cores published in OtherInfo

      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_Cores";
      my $Cores = $config{$valuetoread};

      # No leading and traling spaces. No "
      $Cores =~ s/^\s+//;
      $Cores =~ s/\s+$//;
      $Cores =~ s/\"//g;

      print "GLUE2EntityOtherInfo: Cores=$Cores\n";

      # Platform
      
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_ArchitecturePlatformType";
      my $Platform = $config{$valuetoread};

      # No leading and traling spaces. No "
      $Platform =~ s/^\s+//;
      $Platform =~ s/\s+$//;
      $Platform =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentPlatform: $Platform\n";

      # TotalInstances: number of cores / number of cores per WN

      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_SmpSize";
      my $SmpSize =  $config{$valuetoread};
      
      # No white space. No "
      $SmpSize =~ s/\s+//g;
      $SmpSize =~ s/\"//g;

      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_LogicalCPUs";
      my $LogicalCPUs = $config{$valuetoread};

      # No white space. No "
      $LogicalCPUs =~ s/\s+//g;
      $LogicalCPUs =~ s/\"//g;

      my $GLUE2ExecutionEnvironmentTotalInstances = int ($LogicalCPUs / $SmpSize);
      print "GLUE2ExecutionEnvironmentTotalInstances: $GLUE2ExecutionEnvironmentTotalInstances\n";

      # PhysicalCPUs
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_PhysicalCPUs";
      my $PhysicalCPUs = $config{$valuetoread};

      # No white space. No "
      $PhysicalCPUs =~ s/\s+//g;
      $PhysicalCPUs =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentPhysicalCPUs: $PhysicalCPUs\n";

      # LogicalCPUs
      print "GLUE2ExecutionEnvironmentLogicalCPUs: $LogicalCPUs\n";

      # CPUmultiplicity
      my $cores;
      my $cpus;
      if ($PhysicalCPUs == $LogicalCPUs)
        {
	 $cores = "single";
        }
      else {
            $cores = "multi"; 
        }
      if ($SmpSize  == ($LogicalCPUs / $PhysicalCPUs))
        {
         $cpus = "single";
        }
      else {
            $cpus= "multi";
       }  
      my $GLUE2ExecutionEnvironmentCPUMultiplicity = $cpus . "cpu" . "-" . $cores . "core";
     print "GLUE2ExecutionEnvironmentCPUMultiplicity: $GLUE2ExecutionEnvironmentCPUMultiplicity\n";

      # CPU Vendor
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_ProcessorVendor";
      my $ProcessorVendor = $config{$valuetoread};
      # No leading and traling spaces. No "
      $ProcessorVendor =~ s/^\s+//;
      $ProcessorVendor =~ s/\s+$//;
      $ProcessorVendor =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentCPUVendor: $ProcessorVendor\n";

      # CPU Model
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_ProcessorModel";
      my $ProcessorModel = $config{$valuetoread};

      # No leading and traling spaces. No "
      $ProcessorModel =~ s/^\s+//;
      $ProcessorModel =~ s/\s+$//;
      $ProcessorModel =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentCPUModel: $ProcessorModel\n";

      # CPU Clock speed
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_ProcessorClockSpeed";
      my $ProcessorClockSpeed = $config{$valuetoread};

      # No white space. No "
      $ProcessorClockSpeed =~ s/\s+//g;
      $ProcessorClockSpeed =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentCPUClockSpeed: $ProcessorClockSpeed\n";

      # Main Memory size
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_MainMemoryRAMSize"; 
      my $MainMemoryRAMSize = $config{$valuetoread};

      # No white space. No "
      $MainMemoryRAMSize =~ s/\s+//g;
      $MainMemoryRAMSize =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentMainMemorySize: $MainMemoryRAMSize\n";

      # Virtual Memory size
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_MainMemoryVirtualSize";
      my $MainMemoryVirtualSize = $config{$valuetoread};

      # No white space. No "
      $MainMemoryVirtualSize =~ s/\s+//g;
      $MainMemoryVirtualSize =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentVirtualMemorySize: $MainMemoryVirtualSize\n";

      # OS Family
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_OperatingSystemFamily"; 
      my $OperatingSystemFamily = $config{$valuetoread};

      # No leading and traling spaces. No "
      $OperatingSystemFamily =~ s/^\s+//;
      $OperatingSystemFamily =~ s/\s+$//;
      $OperatingSystemFamily =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentOSFamily: $OperatingSystemFamily\n";


      # OS Name
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_OperatingSystemName";
      my $OperatingSystemName = $config{$valuetoread};

      # No leading and traling spaces. No "
      $OperatingSystemName =~ s/^\s+//;
      $OperatingSystemName =~ s/\s+$//;
      $OperatingSystemName =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentOSName: $OperatingSystemName\n";

      # OS version
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_OperatingSystemRelease";
      my $OperatingSystemRelease = $config{$valuetoread};

      # No leading and traling spaces. No "
      $OperatingSystemRelease =~ s/^\s+//;
      $OperatingSystemRelease =~ s/\s+$//;
      $OperatingSystemRelease =~ s/\"//g;

      print "GLUE2ExecutionEnvironmentOperatingSystemRelease = $OperatingSystemRelease\n";


      # Connectivity in
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_NetworkAdapterInboundIP";
      my $NetworkAdapterInboundIP = $config{$valuetoread};

      # No white space. No "
      $NetworkAdapterInboundIP =~ s/\s+//g;
      $NetworkAdapterInboundIP =~ s/\"//g;

      # Boolean values are supposed to be printed in lower case
      # However it looks like there is a bug and therefore they must be printed in upper case
      $NetworkAdapterInboundIP = uc $NetworkAdapterInboundIP;
      
      print "GLUE2ExecutionEnvironmentConnectivityIn: $NetworkAdapterInboundIP\n";

      # Connectivity out
      $valuetoread = "ExecutionEnvironment" . "_$ResourceID" . "_NetworkAdapterOutboundIP";

      my $NetworkAdapterOutboundIP = $config{$valuetoread};

      # No white space. No "
      $NetworkAdapterOutboundIP =~ s/\s+//g;
      $NetworkAdapterOutboundIP =~ s/\"//g;

      # Boolean values are supposed to be printed in lower case
      # However it looks like there is a bug and therefore they must be printed in upper case

      $NetworkAdapterOutboundIP = uc $NetworkAdapterOutboundIP;

      print "GLUE2ExecutionEnvironmentConnectivityOut: $NetworkAdapterOutboundIP\n";


      # Finally print the upward link to the parent Manager
      my $ManagerId = $ServiceID . "_Manager";
      print "GLUE2ResourceManagerForeignKey: $ManagerId\n";
      print "GLUE2ExecutionEnvironmentComputingManagerForeignKey: $ManagerId\n";

      # Print a newline to finish the object
      print "\n";
     
    }

exit 0;





